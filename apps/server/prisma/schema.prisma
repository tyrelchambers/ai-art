generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Collection {
  uuid        String   @id @default(uuid()) @db.Uuid
  description String?
  name        String   @db.VarChar(255)
  user        User     @relation(fields: [userId], references: [uuid])
  userId      String   @db.Uuid
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @db.Timestamptz(6)
  public      Boolean  @default(false)

  images ImagesCollections[]
}

model Image {
  uuid     String @id @default(uuid()) @db.Uuid
  url      String @db.VarChar(255)
  filename String @db.VarChar(255)
  name     String @db.VarChar(255)
  userId   String @db.Uuid
  user     User   @relation(fields: [userId], references: [uuid])

  createdAt   DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime            @updatedAt @db.Timestamptz(6)
  collections ImagesCollections[]
}

model SequelizeMeta {
  name String @id @db.VarChar(255)
}

model User {
  uuid        String       @id @default(uuid()) @db.Uuid
  email       String       @unique @db.VarChar(255)
  password    String       @db.VarChar(255)
  createdAt   DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime     @updatedAt @db.Timestamptz(6)
  images      Image[]
  collections Collection[]
}

model ImagesCollections {
  image        Image      @relation(fields: [imageId], references: [uuid])
  imageId      String     @db.Uuid // relation scalar field (used in the `@relation` attribute above)
  collection   Collection @relation(fields: [collectionId], references: [uuid])
  collectionId String     @db.Uuid // relation scalar field (used in the `@relation` attribute above)

  @@id([imageId, collectionId])
}
